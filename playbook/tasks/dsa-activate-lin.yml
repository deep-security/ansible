# Copyright 2018, Trend Micro
#
# License as per [repo](master/LICENSE)
#
# *********************************************************************
# * Activate the Deep Security Agent (For Linux only)
# *********************************************************************
---
# *********************************************************************
# * Check if DSA installed properly
# *********************************************************************
- debug:
    msg: "Check if DSA installed properly."

- stat:
    path: /opt/ds_agent/dsa_query
  register: dsaQuery

- fail:
    msg: 
        - "Could not find command /opt/ds_agent/dsa_query to query DSA certificate."
        - "Please make sure Deep Security Agent has been installed"
  when: dsaQuery.stat.size is not defined 

# *********************************************************************
# * Check if DSA activated already
# *********************************************************************
- debug:
    msg: "Check if DSA activated already."

- set_fact:
    isActivated: false

- shell: /opt/ds_agent/dsa_query -c GetAgentStatus agentCertHash
  register: certHash

- set_fact:
    isActivated: true
  when: (certHash.stdout | regex_search('(D0:68:DE:48:1B:DC:4D:00:89:07:7F:85:15:20:C5:90:11:EB:56:6A)')) != "D0:68:DE:48:1B:DC:4D:00:89:07:7F:85:15:20:C5:90:11:EB:56:6A"

- debug:
    msg: "isActivated: {{ isActivated }}"

# *********************************************************************
# * Construct dsa_control arguments
# *********************************************************************
- debug:
    msg: "Construct dsa_control arguments."

- set_fact:
    dsa_contrl_argument: "dsm://{{ dsa_activation_hostname }}:{{ dsa_activation_port }}/"
    
- set_fact:
    dsa_contrl_argument: "{{ dsa_contrl_argument }} 'tenantID:{{ tenant_id }}' 'token:{{ token }}'"
  when: >
        tenant_id != none and 
        token != none

- set_fact:
    dsa_contrl_argument: "{{ dsa_contrl_argument }} 'policyid:{{ policy_id }}'"
  when: policy_id != none   

- debug:
    msg: "Running dsa_control with args: {{ dsa_contrl_argument }}"

# *********************************************************************
# * Activate DSA when it's not activated or forecd to reactivate
# *********************************************************************
- debug:
    msg: 
        - "Activate DSA when it's not activated or forecd to reactivate."
        - "force_reactivation: {{ force_reactivation }}"

- shell: /opt/ds_agent/dsa_control -r
  when: isActivated != true or force_reactivation != false
  become: true

- shell: /opt/ds_agent/dsa_control -a {{ dsa_contrl_argument }}
  when: isActivated != true or force_reactivation != false
  become: true